{
  "category": "code-generation",
  "description": "Programming and code generation responses",
  "templates": [
    {
      "id": "code-gen-1",
      "content": "Here's a sample function demonstrating the mock code generation capability:\n\n```typescript\n// Mock function generated by Claude Wrapper\nfunction processData(input: string): string {\n  // This is a mock implementation\n  return `Processed: ${input}`;\n}\n\n// Example usage:\nconst result = processData('test data');\nconsole.log(result); // Output: Processed: test data\n```\n\nThis mock code demonstrates proper syntax highlighting and formatting within the wrapper system.",
      "model": "sonnet",
      "finishReason": "stop",
      "responseTime": 350,
      "tokenUsage": {
        "prompt_tokens": 45,
        "completion_tokens": 89,
        "total_tokens": 134
      },
      "triggers": ["function", "code", "typescript", "javascript", "implement"]
    },
    {
      "id": "code-gen-2",
      "content": "I'll help you create a Python script. Here's a mock example:\n\n```python\ndef mock_algorithm(data):\n    \"\"\"\n    Mock implementation of a data processing algorithm\n    \"\"\"\n    results = []\n    for item in data:\n        # Mock processing logic\n        processed = f\"Mock processed: {item}\"\n        results.append(processed)\n    \n    return results\n\n# Usage example\ndata = ['item1', 'item2', 'item3']\nprocessed_data = mock_algorithm(data)\nprint(processed_data)\n```\n\nThis demonstrates how the wrapper handles multi-line code responses with proper formatting.",
      "model": "sonnet",
      "finishReason": "stop",
      "responseTime": 420,
      "tokenUsage": {
        "prompt_tokens": 35,
        "completion_tokens": 115,
        "total_tokens": 150
      },
      "triggers": ["python", "script", "algorithm", "class", "def"]
    },
    {
      "id": "code-gen-3",
      "content": "Here's a mock React component example:\n\n```tsx\nimport React, { useState } from 'react';\n\ninterface MockComponentProps {\n  title: string;\n  items: string[];\n}\n\nconst MockComponent: React.FC<MockComponentProps> = ({ title, items }) => {\n  const [selectedItem, setSelectedItem] = useState<string | null>(null);\n\n  return (\n    <div className=\"mock-component\">\n      <h2>{title}</h2>\n      <ul>\n        {items.map((item, index) => (\n          <li \n            key={index}\n            onClick={() => setSelectedItem(item)}\n            style={{ cursor: 'pointer' }}\n          >\n            {item}\n          </li>\n        ))}\n      </ul>\n      {selectedItem && (\n        <p>Selected: {selectedItem}</p>\n      )}\n    </div>\n  );\n};\n\nexport default MockComponent;\n```\n\nThis mock component shows how the wrapper handles React/JSX syntax and TypeScript interfaces.",
      "model": "sonnet",
      "finishReason": "stop",
      "responseTime": 380,
      "tokenUsage": {
        "prompt_tokens": 40,
        "completion_tokens": 142,
        "total_tokens": 182
      },
      "triggers": ["react", "component", "tsx", "jsx", "frontend"]
    },
    {
      "id": "code-gen-4",
      "content": "Here's a mock REST API endpoint implementation:\n\n```typescript\nimport express from 'express';\nimport { Request, Response } from 'express';\n\ninterface MockUser {\n  id: number;\n  name: string;\n  email: string;\n}\n\nconst mockUsers: MockUser[] = [\n  { id: 1, name: 'John Doe', email: 'john@example.com' },\n  { id: 2, name: 'Jane Smith', email: 'jane@example.com' }\n];\n\n// Mock GET endpoint\napp.get('/api/users', (req: Request, res: Response) => {\n  res.json({\n    success: true,\n    data: mockUsers,\n    message: 'Mock users retrieved successfully'\n  });\n});\n\n// Mock POST endpoint\napp.post('/api/users', (req: Request, res: Response) => {\n  const { name, email } = req.body;\n  \n  const newUser: MockUser = {\n    id: mockUsers.length + 1,\n    name,\n    email\n  };\n  \n  mockUsers.push(newUser);\n  \n  res.status(201).json({\n    success: true,\n    data: newUser,\n    message: 'Mock user created successfully'\n  });\n});\n```\n\nThis demonstrates how the wrapper handles API endpoint code generation with proper error handling patterns.",
      "model": "sonnet",
      "finishReason": "stop",
      "responseTime": 450,
      "tokenUsage": {
        "prompt_tokens": 50,
        "completion_tokens": 198,
        "total_tokens": 248
      },
      "triggers": ["api", "endpoint", "express", "rest", "server"]
    }
  ]
}